let fs,ncp,path,promisify,execa,Listr,projectInstall;_a12‍.x([["createProject",()=>createProject]]);_a12‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_a12‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_a12‍.w("path",[["default",["path"],function(v){path=v}]]);_a12‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_a12‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_a12‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_a12‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);
 
 



 

const access = promisify(fs.access);
const copy = promisify(ncp);
const chalk = require('chalk');

async function copyTemplateFiles(options){
    return copy(options.templateDirectory, options.targetDirectory, {
        clobber: false,
    });
}

async function initGit(options) {
    const result = await execa('git', ['init'], {
        cwd: options.targetDirectory,
    });
    if (result.failed){
        return Promise.reject(new Error('Failed to initialize Git'));
    } 
    return;
}

       async function createProject(options){
    options = {
        ...options, 
        targetDirectory: options.targetDirectory || process.cwd(), 

    };

    const currentFileUrl = _a12‍._.meta.url;
    const templateDir = path.resolve(
        new URL(currentFileUrl).pathname,
        '../../templates', 
        options.template.toLowerCase()
    );
    options.templateDirectory = templateDir;

    try {
        await access(templateDir, fs.constants.R_OK);
    } catch(err) {
        _a12‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
        process.exit(1);
    }

    const tasks = new Listr([
        {
            title:'Copy project files',
            task: () => copyTemplateFiles(options)
        },
        {
            title:'Initialize Git', 
            task: () => initGit(options),
            enabled: () => options.git
        },
        {
            title:'Install dependencies', 
            task: () => projectInstall({
                cwd: options.targetDirectory,
            }),
            skip: () => !options.runInstall 
        }
    ]);
    
    await tasks.run();

    _a12‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
    return true; 
}
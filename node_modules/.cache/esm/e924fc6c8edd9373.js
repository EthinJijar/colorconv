
'use strict';let arg,createProject;_8ed‍.x([["cli",()=>cli]]);_8ed‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_8ed‍.w("./main",[["createProject",["createProject"],function(v){createProject=v}]]);
const meow = require('meow')
const convertColor = require('./convertColor')


const inquirer = require('inquirer');


function parseArgumentsIntoOptions(rawArgs) {
    const args = arg(
        {
        '--git': Boolean, 
        '--yes': Boolean,
        '--install': Boolean,
        '-g': '--git',
        '-y': '--yes',
        '-i': '--install'
        },
        {
            argv:rawArgs.slice(2),
        }
    );
    return {
        skipPrompts: args['--yes'] || false,
        git: args['--git'] || false, 
        template: args._[0],
        reunInstall: args['--install'] || false
    }
}

async function promptForMissingOptions(options) {
    const defaultTemplate = 'JavaScript';
    if(options.skipPrompts) {
        return {
            ...options, 
            template: options.template || defaultTemplate,
        };
    }
    const questions = [];
    if(!options.template) {
        questions.push({
            type: 'list',
            name: 'template',
            message: 'Please choose which project template to use',
            choices: ['JavaScript', 'TypeScript'],
            default: defaultTemplate,
        });
    }
    if(!options.git){
        questions.push({
            type: 'confirm',
            name: 'git',
            message: 'Initialize a git repository ?',
            choices: ['JavaScript', 'TypeScript'],
            default: false,
        });
    }
    const answers = await inquirer.prompt(questions);
    return {
        ...options, 
        template: options.template || answers.template,
        git: options.git || answers.git,
    };
}

       async function cli(args) {
    let options = parseArgumentsIntoOptions(args);
    options = promptForMissingOptions(options);
    await createProject(options);
}

const cli2 = meow(`
  Examples
  # rgb
  $ convert-color 'rgb(40, 42, 54)'

  # alpha values can be % or decimal
  $ convert-color 'rgba(40, 42, 54, 75%)'
  $ convert-color 'rgba(40, 42, 54, 0.75)'

  # hex
  $ convert-color ff9afd

  # can have a pound sign at beginning
  $ convert-color '#282a36'

  # works with 8 digit hex codes (opacity)
  $ convert-color 282a36bf

  # hsl
  $ convert-color 'hsl(336, 100%, 50%)'

  # alpha values can be % or decimal
  $ convert-color 'hsla(336, 100%, 50%, 75%)'
  $ convert-color 'hsla(336, 100%, 50%, 0.75)'

  # you can also omit a color and input it using the interactive input
  $ convert-color

  Enter the color you want to convert:
`)

const initialColor = cli2.input.length === 0 ? null : cli2.input.join(' ')
module.exports = convertColor(initialColor)